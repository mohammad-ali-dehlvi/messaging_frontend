// This file is auto-generated by @hey-api/openapi-ts


export type AdminUserModel = {
    email: string;
    display_name: string;
    phone: string | null;
};

export type BaseResponseModel = {
    /**
     * True if API is runs without any error
     */
    success: boolean;
    /**
     * Message related to API's success and failure
     */
    message: string | null;
};

export type BulkBaseResponseModel = {
    result: Array<BaseResponseModel>;
};

export type BulkCreateUsersRequest = {
    users: Array<CreateUserModel>;
};

export type BulkDeleteUsersRequest = {
    users: Array<CreateUserModel>;
};

export type CreateUserModel = {
    /**
     * Email of the user
     */
    email: string;
    /**
     * Password of the user
     */
    password: string;
    /**
     * Full name of the user
     */
    display_name: string;
    /**
     * Default Email verified
     */
    email_verified?: boolean | null;
};

export type DeleteUserModel = {
    /**
     * Email to delete
     */
    email: string;
};

export type FriendRequestAnswerRequest = {
    email: string;
    status: FriendRequestStatus;
};

export type FriendRequestAnswerResponse = {
    /**
     * True if API is runs without any error
     */
    success: boolean;
    /**
     * Message related to API's success and failure
     */
    message: string | null;
};

export type FriendRequestDetail = {
    status: string;
    created_at: string;
    updated_at: string;
    responded_at: string | null;
    requester: UserPreview;
    recipient: UserPreview;
};

export type FriendRequestModel = {
    requester: FriendRequestUser;
    recipient: FriendRequestUser;
    status: FriendRequestStatus;
};

export type FriendRequestRemoveRequest = {
    email: string;
};

export type FriendRequestRemoveResponse = {
    /**
     * True if API is runs without any error
     */
    success: boolean;
    /**
     * Message related to API's success and failure
     */
    message: string | null;
};

export enum FriendRequestStatus {
    ACCEPTED = 'accepted',
    REJECTED = 'rejected',
    PENDING = 'pending',
    REMOVED = 'removed'
}

export type FriendRequestUser = {
    email: string;
    display_name: string;
};

export type FriendWithMessageOut = {
    id: number;
    email: string;
    display_name: string;
    friend_since: string;
    last_message: string | null;
    last_activity_time: string;
};

export type FriendsListRequest = {
    limit: number;
    offset: number;
    status: Array<FriendRequestStatus>;
};

export type FriendsListResponse = {
    data: Array<FriendRequestDetail>;
    next_offset: number | null;
    total: number;
};

export type FriendsWithMessageRequest = {
    limit: number;
    offset: number;
    q: string | null;
};

export type FriendsWithMessageResponse = {
    data: Array<FriendWithMessageOut>;
    next_offset: number | null;
    total: number;
};

export type GetAllUsersRequest = {
    limit: number;
    offset: number;
    q: string | null;
};

export type GetAllUsersResponse = {
    data: Array<AdminUserModel>;
    next_offset: number | null;
    total: number;
};

export type GetContextUsersRequest = {
    limit: number;
    offset: number;
    q: string | null;
    context_email: string;
};

export type GetContextUsersResponse = {
    data: Array<UserOut>;
    next_offset: number | null;
    total: number;
};

export type GetFriendsRequest = {
    limit: number;
    offset: number;
    q: string | null;
    email: string;
};

export type GetFriendsResponse = {
    data: Array<FriendRequestModel>;
    next_offset: number | null;
    total: number;
};

export type GetLoginTokenRequest = {
    email: string;
};

export type GetLoginTokenResponse = {
    token: string;
};

export type GetMessagesRequest = {
    limit: number;
    offset: number;
    sender_email: string;
    recipient_email: string | null;
};

export type GetMessagesResponse = {
    data: Array<custom_services__admin__schemas__MessageModel>;
    next_offset: number | null;
    total: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type MessageGetRequest = {
    limit: number;
    offset: number;
    email: string;
    q: string | null;
};

export type MessageGetResponse = {
    data: Array<custom_services__message__schemas__MessageModel>;
    next_offset: number | null;
    total: number;
};

export type MessageUser = {
    email: string;
    display_name: string;
};

export type Recipient = {
    email: string;
};

export type SearchUsersRequest = {
    limit: number;
    offset: number;
    q: string | null;
};

export type SearchUsersResponse = {
    data: Array<UserOut>;
    next_offset: number | null;
    total: number;
};

export type SendFriendRequest = {
    email: string;
};

export type SendFriendRequestResponse = {
    /**
     * True if API is runs without any error
     */
    success: boolean;
    /**
     * Message related to API's success and failure
     */
    message: string | null;
};

export type SendMessageRequest = {
    email: string;
    text: string;
};

export type SendMessageResponse = {
    /**
     * True if API is runs without any error
     */
    success: boolean;
    /**
     * Message related to API's success and failure
     */
    message: string | null;
};

export type Sender = {
    email: string;
};

export type SetFriendRequestRequest = {
    requester_email: string;
    recipient_email: string;
    status: FriendRequestStatus;
};

export type SetFriendRequestResponse = {
    /**
     * True if API is runs without any error
     */
    success: boolean;
    /**
     * Message related to API's success and failure
     */
    message: string | null;
};

export type UserOut = {
    email: string;
    display_name: string;
    phone: string | null;
    friend_status: FriendRequestStatus | null;
};

export type UserPreview = {
    email: string;
    display_name: string;
    phone: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type custom_services__admin__schemas__MessageModel = {
    sender: MessageUser;
    recipient: MessageUser;
    text: string;
};

export type custom_services__message__schemas__MessageModel = {
    text: string;
    recipient: Recipient;
    sender: Sender;
};

export type $OpenApiTs = {
    '/auth/create_user': {
    post: {
    req: {
    requestBody: CreateUserModel;
};
    res: {
    200: BaseResponseModel;
};
};
};
    '/auth/delete_user': {
    post: {
    req: {
    requestBody: DeleteUserModel;
};
    res: {
    200: BaseResponseModel;
};
};
};
    '/auth/bulk/create_user': {
    post: {
    req: {
    requestBody: BulkCreateUsersRequest;
};
    res: {
    200: BulkBaseResponseModel;
};
};
};
    '/auth/bulk/delete_user': {
    post: {
    req: {
    requestBody: BulkDeleteUsersRequest;
};
    res: {
    200: BulkBaseResponseModel;
};
};
};
    '/test_socket': {
    get: {
    res: {
    200: unknown;
};
};
};
    '/social_actions/search_users': {
    post: {
    req: {
    requestBody: SearchUsersRequest;
};
    res: {
    200: SearchUsersResponse;
};
};
};
    '/friends/send_request': {
    post: {
    req: {
    requestBody: SendFriendRequest;
};
    res: {
    200: SendFriendRequestResponse;
};
};
};
    '/friends/answer': {
    post: {
    req: {
    requestBody: FriendRequestAnswerRequest;
};
    res: {
    200: FriendRequestAnswerResponse;
};
};
};
    '/friends/remove': {
    post: {
    req: {
    requestBody: FriendRequestRemoveRequest;
};
    res: {
    200: FriendRequestRemoveResponse;
};
};
};
    '/friends/list': {
    post: {
    req: {
    requestBody: FriendsListRequest;
};
    res: {
    200: FriendsListResponse;
};
};
};
    '/friends/friends_with_last_message': {
    post: {
    req: {
    requestBody: FriendsWithMessageRequest;
};
    res: {
    200: FriendsWithMessageResponse;
};
};
};
    '/messaging/message_get': {
    post: {
    req: {
    requestBody: MessageGetRequest;
};
    res: {
    200: MessageGetResponse;
};
};
};
    '/messaging/send_message': {
    post: {
    req: {
    requestBody: SendMessageRequest;
};
    res: {
    200: SendMessageResponse;
};
};
};
    '/admin/get_login_token': {
    post: {
    req: {
    requestBody: GetLoginTokenRequest;
};
    res: {
    200: GetLoginTokenResponse;
};
};
};
    '/admin/get_all_users': {
    post: {
    req: {
    requestBody: GetAllUsersRequest;
};
    res: {
    200: GetAllUsersResponse;
};
};
};
    '/admin/get_friends': {
    post: {
    req: {
    requestBody: GetFriendsRequest;
};
    res: {
    200: GetFriendsResponse;
};
};
};
    '/admin/search_context_users': {
    post: {
    req: {
    requestBody: GetContextUsersRequest;
};
    res: {
    200: GetContextUsersResponse;
};
};
};
    '/admin/set_friend_request': {
    post: {
    req: {
    requestBody: SetFriendRequestRequest;
};
    res: {
    200: SetFriendRequestResponse;
};
};
};
    '/admin/get_messages': {
    post: {
    req: {
    requestBody: GetMessagesRequest;
};
    res: {
    200: GetMessagesResponse;
};
};
};
};