// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './models';

export class AuthService {
	/**
	 * Create User
	 * @returns BaseResponseModel Successful Response
	 * @throws ApiError
	 */
	public static createUserAuthCreateUserPost(data: $OpenApiTs['/auth/create_user']['post']['req']): CancelablePromise<$OpenApiTs['/auth/create_user']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/auth/create_user',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Delete User
	 * @returns BaseResponseModel Successful Response
	 * @throws ApiError
	 */
	public static deleteUserAuthDeleteUserPost(data: $OpenApiTs['/auth/delete_user']['post']['req']): CancelablePromise<$OpenApiTs['/auth/delete_user']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/auth/delete_user',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Bulk Create Users
	 * @returns BulkBaseResponseModel Successful Response
	 * @throws ApiError
	 */
	public static bulkCreateUsersAuthBulkCreateUserPost(data: $OpenApiTs['/auth/bulk/create_user']['post']['req']): CancelablePromise<$OpenApiTs['/auth/bulk/create_user']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/auth/bulk/create_user',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Bulk Delete Users
	 * @returns BulkBaseResponseModel Successful Response
	 * @throws ApiError
	 */
	public static bulkDeleteUsersAuthBulkDeleteUserPost(data: $OpenApiTs['/auth/bulk/delete_user']['post']['req']): CancelablePromise<$OpenApiTs['/auth/bulk/delete_user']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/auth/bulk/delete_user',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

}

export class WebSocketService {
	/**
	 * Test Socket
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static testSocketTestSocketGet(): CancelablePromise<$OpenApiTs['/test_socket']['get']['res'][200]> {
		
		return __request(OpenAPI, {
			method: 'GET',
			url: '/test_socket',
		});
	}

}

export class SocialActionsService {
	/**
	 * Search Users
	 * @returns SearchUsersResponse Successful Response
	 * @throws ApiError
	 */
	public static searchUsersSocialActionsSearchUsersPost(data: $OpenApiTs['/social_actions/search_users']['post']['req']): CancelablePromise<$OpenApiTs['/social_actions/search_users']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/social_actions/search_users',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

}

export class FriendsService {
	/**
	 * Send Friend Request
	 * @returns SendFriendRequestResponse Successful Response
	 * @throws ApiError
	 */
	public static sendFriendRequestFriendsSendRequestPost(data: $OpenApiTs['/friends/send_request']['post']['req']): CancelablePromise<$OpenApiTs['/friends/send_request']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/friends/send_request',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Friend Request Answer
	 * @returns FriendRequestAnswerResponse Successful Response
	 * @throws ApiError
	 */
	public static friendRequestAnswerFriendsAnswerPost(data: $OpenApiTs['/friends/answer']['post']['req']): CancelablePromise<$OpenApiTs['/friends/answer']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/friends/answer',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Friend Request Remove
	 * @returns FriendRequestRemoveResponse Successful Response
	 * @throws ApiError
	 */
	public static friendRequestRemoveFriendsRemovePost(data: $OpenApiTs['/friends/remove']['post']['req']): CancelablePromise<$OpenApiTs['/friends/remove']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/friends/remove',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Get Friend Requests
	 * @returns FriendsListResponse Successful Response
	 * @throws ApiError
	 */
	public static getFriendRequestsFriendsListPost(data: $OpenApiTs['/friends/list']['post']['req']): CancelablePromise<$OpenApiTs['/friends/list']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/friends/list',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Get Friends With Last Message
	 * @returns FriendsWithMessageResponse Successful Response
	 * @throws ApiError
	 */
	public static getFriendsWithLastMessageFriendsFriendsWithLastMessagePost(data: $OpenApiTs['/friends/friends_with_last_message']['post']['req']): CancelablePromise<$OpenApiTs['/friends/friends_with_last_message']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/friends/friends_with_last_message',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

}

export class MessagingService {
	/**
	 * Message Get
	 * @returns MessageGetResponse Successful Response
	 * @throws ApiError
	 */
	public static messageGetMessagingMessageGetPost(data: $OpenApiTs['/messaging/message_get']['post']['req']): CancelablePromise<$OpenApiTs['/messaging/message_get']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/messaging/message_get',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Send Message
	 * @returns SendMessageResponse Successful Response
	 * @throws ApiError
	 */
	public static sendMessageMessagingSendMessagePost(data: $OpenApiTs['/messaging/send_message']['post']['req']): CancelablePromise<$OpenApiTs['/messaging/send_message']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/messaging/send_message',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

}

export class AdminService {
	/**
	 * Get Login Token
	 * @returns GetLoginTokenResponse Successful Response
	 * @throws ApiError
	 */
	public static getLoginTokenAdminGetLoginTokenPost(data: $OpenApiTs['/admin/get_login_token']['post']['req']): CancelablePromise<$OpenApiTs['/admin/get_login_token']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/admin/get_login_token',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Get All Users
	 * @returns GetAllUsersResponse Successful Response
	 * @throws ApiError
	 */
	public static getAllUsersAdminGetAllUsersPost(data: $OpenApiTs['/admin/get_all_users']['post']['req']): CancelablePromise<$OpenApiTs['/admin/get_all_users']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/admin/get_all_users',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Get Friends
	 * @returns GetFriendsResponse Successful Response
	 * @throws ApiError
	 */
	public static getFriendsAdminGetFriendsPost(data: $OpenApiTs['/admin/get_friends']['post']['req']): CancelablePromise<$OpenApiTs['/admin/get_friends']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/admin/get_friends',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Search Context Users
	 * @returns GetContextUsersResponse Successful Response
	 * @throws ApiError
	 */
	public static searchContextUsersAdminSearchContextUsersPost(data: $OpenApiTs['/admin/search_context_users']['post']['req']): CancelablePromise<$OpenApiTs['/admin/search_context_users']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/admin/search_context_users',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Set Friend Request
	 * @returns SetFriendRequestResponse Successful Response
	 * @throws ApiError
	 */
	public static setFriendRequestAdminSetFriendRequestPost(data: $OpenApiTs['/admin/set_friend_request']['post']['req']): CancelablePromise<$OpenApiTs['/admin/set_friend_request']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/admin/set_friend_request',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

	/**
	 * Get Messages
	 * @returns GetMessagesResponse Successful Response
	 * @throws ApiError
	 */
	public static getMessagesAdminGetMessagesPost(data: $OpenApiTs['/admin/get_messages']['post']['req']): CancelablePromise<$OpenApiTs['/admin/get_messages']['post']['res'][200]> {
		const {
                    requestBody
                } = data;
		return __request(OpenAPI, {
			method: 'POST',
			url: '/admin/get_messages',
			body: requestBody,
			mediaType: 'application/json',
			errors: {
				422: `Validation Error`,
			},
		});
	}

}