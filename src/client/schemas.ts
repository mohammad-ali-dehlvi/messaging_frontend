// This file is auto-generated by @hey-api/openapi-ts


export const $AdminUserModel = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        display_name: {
            type: 'string',
            title: 'Display Name'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        }
    },
    type: 'object',
    required: ['email', 'display_name', 'phone'],
    title: 'AdminUserModel'
} as const;

export const $BaseResponseModel = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'True if API is runs without any error'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: "Message related to API's success and failure"
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'BaseResponseModel'
} as const;

export const $BulkBaseResponseModel = {
    properties: {
        result: {
            items: {
                '$ref': '#/components/schemas/BaseResponseModel'
            },
            type: 'array',
            title: 'Result'
        }
    },
    type: 'object',
    required: ['result'],
    title: 'BulkBaseResponseModel'
} as const;

export const $BulkCreateUsersRequest = {
    properties: {
        users: {
            items: {
                '$ref': '#/components/schemas/CreateUserModel'
            },
            type: 'array',
            title: 'Users'
        }
    },
    type: 'object',
    required: ['users'],
    title: 'BulkCreateUsersRequest'
} as const;

export const $BulkDeleteUsersRequest = {
    properties: {
        users: {
            items: {
                '$ref': '#/components/schemas/CreateUserModel'
            },
            type: 'array',
            title: 'Users'
        }
    },
    type: 'object',
    required: ['users'],
    title: 'BulkDeleteUsersRequest'
} as const;

export const $CreateUserModel = {
    properties: {
        email: {
            type: 'string',
            title: 'Email',
            description: 'Email of the user'
        },
        password: {
            type: 'string',
            title: 'Password',
            description: 'Password of the user'
        },
        display_name: {
            type: 'string',
            title: 'Display Name',
            description: 'Full name of the user'
        },
        email_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email Verified',
            description: 'Default Email verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'display_name'],
    title: 'CreateUserModel'
} as const;

export const $DeleteUserModel = {
    properties: {
        email: {
            type: 'string',
            title: 'Email',
            description: 'Email to delete'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'DeleteUserModel'
} as const;

export const $FriendRequestAnswerRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        status: {
            '$ref': '#/components/schemas/FriendRequestStatus'
        }
    },
    type: 'object',
    required: ['email', 'status'],
    title: 'FriendRequestAnswerRequest'
} as const;

export const $FriendRequestAnswerResponse = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'True if API is runs without any error'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: "Message related to API's success and failure"
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'FriendRequestAnswerResponse'
} as const;

export const $FriendRequestDetail = {
    properties: {
        status: {
            type: 'string',
            title: 'Status'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        responded_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Responded At'
        },
        requester: {
            '$ref': '#/components/schemas/UserPreview'
        },
        recipient: {
            '$ref': '#/components/schemas/UserPreview'
        }
    },
    type: 'object',
    required: ['status', 'created_at', 'updated_at', 'responded_at', 'requester', 'recipient'],
    title: 'FriendRequestDetail'
} as const;

export const $FriendRequestModel = {
    properties: {
        requester: {
            '$ref': '#/components/schemas/FriendRequestUser'
        },
        recipient: {
            '$ref': '#/components/schemas/FriendRequestUser'
        },
        status: {
            '$ref': '#/components/schemas/FriendRequestStatus'
        }
    },
    type: 'object',
    required: ['requester', 'recipient', 'status'],
    title: 'FriendRequestModel'
} as const;

export const $FriendRequestRemoveRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'FriendRequestRemoveRequest'
} as const;

export const $FriendRequestRemoveResponse = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'True if API is runs without any error'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: "Message related to API's success and failure"
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'FriendRequestRemoveResponse'
} as const;

export const $FriendRequestStatus = {
    type: 'string',
    enum: ['accepted', 'rejected', 'pending', 'removed'],
    title: 'FriendRequestStatus'
} as const;

export const $FriendRequestUser = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        display_name: {
            type: 'string',
            title: 'Display Name'
        }
    },
    type: 'object',
    required: ['email', 'display_name'],
    title: 'FriendRequestUser'
} as const;

export const $FriendWithMessageOut = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        display_name: {
            type: 'string',
            title: 'Display Name'
        },
        friend_since: {
            type: 'string',
            format: 'date-time',
            title: 'Friend Since'
        },
        last_message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Message'
        },
        last_activity_time: {
            type: 'string',
            format: 'date-time',
            title: 'Last Activity Time'
        }
    },
    type: 'object',
    required: ['id', 'email', 'display_name', 'friend_since', 'last_message', 'last_activity_time'],
    title: 'FriendWithMessageOut'
} as const;

export const $FriendsListRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        status: {
            items: {
                '$ref': '#/components/schemas/FriendRequestStatus'
            },
            type: 'array',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'status'],
    title: 'FriendsListRequest'
} as const;

export const $FriendsListResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/FriendRequestDetail'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'FriendsListResponse'
} as const;

export const $FriendsWithMessageRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        q: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Q'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'q'],
    title: 'FriendsWithMessageRequest'
} as const;

export const $FriendsWithMessageResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/FriendWithMessageOut'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'FriendsWithMessageResponse'
} as const;

export const $GetAllUsersRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        q: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Q'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'q'],
    title: 'GetAllUsersRequest'
} as const;

export const $GetAllUsersResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AdminUserModel'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'GetAllUsersResponse'
} as const;

export const $GetContextUsersRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        q: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Q'
        },
        context_email: {
            type: 'string',
            title: 'Context Email'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'q', 'context_email'],
    title: 'GetContextUsersRequest'
} as const;

export const $GetContextUsersResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserOut'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'GetContextUsersResponse'
} as const;

export const $GetFriendsRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        q: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Q'
        },
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'q', 'email'],
    title: 'GetFriendsRequest'
} as const;

export const $GetFriendsResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/FriendRequestModel'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'GetFriendsResponse'
} as const;

export const $GetLoginTokenRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'GetLoginTokenRequest'
} as const;

export const $GetLoginTokenResponse = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'GetLoginTokenResponse'
} as const;

export const $GetMessagesRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        sender_email: {
            type: 'string',
            title: 'Sender Email'
        },
        recipient_email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recipient Email'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'sender_email', 'recipient_email'],
    title: 'GetMessagesRequest'
} as const;

export const $GetMessagesResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/custom_services__admin__schemas__MessageModel'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'GetMessagesResponse'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $MessageGetRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        q: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Q'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'email', 'q'],
    title: 'MessageGetRequest'
} as const;

export const $MessageGetResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/custom_services__message__schemas__MessageModel'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'MessageGetResponse'
} as const;

export const $MessageUser = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        display_name: {
            type: 'string',
            title: 'Display Name'
        }
    },
    type: 'object',
    required: ['email', 'display_name'],
    title: 'MessageUser'
} as const;

export const $Recipient = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Recipient'
} as const;

export const $SearchUsersRequest = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        },
        q: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Q'
        }
    },
    type: 'object',
    required: ['limit', 'offset', 'q'],
    title: 'SearchUsersRequest'
} as const;

export const $SearchUsersResponse = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserOut'
            },
            type: 'array',
            title: 'Data'
        },
        next_offset: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Offset'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['data', 'next_offset', 'total'],
    title: 'SearchUsersResponse'
} as const;

export const $SendFriendRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'SendFriendRequest'
} as const;

export const $SendFriendRequestResponse = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'True if API is runs without any error'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: "Message related to API's success and failure"
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'SendFriendRequestResponse'
} as const;

export const $SendMessageRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        text: {
            type: 'string',
            title: 'Text'
        }
    },
    type: 'object',
    required: ['email', 'text'],
    title: 'SendMessageRequest'
} as const;

export const $SendMessageResponse = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'True if API is runs without any error'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: "Message related to API's success and failure"
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'SendMessageResponse'
} as const;

export const $Sender = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Sender'
} as const;

export const $SetFriendRequestRequest = {
    properties: {
        requester_email: {
            type: 'string',
            title: 'Requester Email'
        },
        recipient_email: {
            type: 'string',
            title: 'Recipient Email'
        },
        status: {
            '$ref': '#/components/schemas/FriendRequestStatus'
        }
    },
    type: 'object',
    required: ['requester_email', 'recipient_email', 'status'],
    title: 'SetFriendRequestRequest'
} as const;

export const $SetFriendRequestResponse = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'True if API is runs without any error'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: "Message related to API's success and failure"
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'SetFriendRequestResponse'
} as const;

export const $UserOut = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        display_name: {
            type: 'string',
            title: 'Display Name'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        friend_status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FriendRequestStatus'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['email', 'display_name', 'phone', 'friend_status'],
    title: 'UserOut'
} as const;

export const $UserPreview = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        display_name: {
            type: 'string',
            title: 'Display Name'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        }
    },
    type: 'object',
    required: ['email', 'display_name', 'phone'],
    title: 'UserPreview'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $custom_services__admin__schemas__MessageModel = {
    properties: {
        sender: {
            '$ref': '#/components/schemas/MessageUser'
        },
        recipient: {
            '$ref': '#/components/schemas/MessageUser'
        },
        text: {
            type: 'string',
            title: 'Text'
        }
    },
    type: 'object',
    required: ['sender', 'recipient', 'text'],
    title: 'MessageModel'
} as const;

export const $custom_services__message__schemas__MessageModel = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        recipient: {
            '$ref': '#/components/schemas/Recipient'
        },
        sender: {
            '$ref': '#/components/schemas/Sender'
        }
    },
    type: 'object',
    required: ['text', 'recipient', 'sender'],
    title: 'MessageModel'
} as const;